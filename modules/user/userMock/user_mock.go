// Code generated by MockGen. DO NOT EDIT.
// Source: modules/user/userUsecase/userUsecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	io "io"
	reflect "reflect"
	"time"

	user "github.com/Win-TS/gleam-backend.git/modules/user"
	userdb "github.com/Win-TS/gleam-backend.git/pkg/database/postgres/userdb/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockUserUsecaseService is a mock of UserUsecaseService interface.
type MockUserUsecaseService struct {
	ctrl     *gomock.Controller
	recorder *MockUserUsecaseServiceMockRecorder
}

// Deadline implements context.Context.
func (*MockUserUsecaseService) Deadline() (deadline time.Time, ok bool) {
	panic("unimplemented")
}

// Done implements context.Context.
func (*MockUserUsecaseService) Done() <-chan struct{} {
	panic("unimplemented")
}

// Err implements context.Context.
func (*MockUserUsecaseService) Err() error {
	panic("unimplemented")
}

// Value implements context.Context.
func (*MockUserUsecaseService) Value(key any) any {
	panic("unimplemented")
}

// MockUserUsecaseServiceMockRecorder is the mock recorder for MockUserUsecaseService.
type MockUserUsecaseServiceMockRecorder struct {
	mock *MockUserUsecaseService
}

// NewMockUserUsecaseService creates a new mock instance.
func NewMockUserUsecaseService(ctrl *gomock.Controller) *MockUserUsecaseService {
	mock := &MockUserUsecaseService{ctrl: ctrl}
	mock.recorder = &MockUserUsecaseServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUsecaseService) EXPECT() *MockUserUsecaseServiceMockRecorder {
	return m.recorder
}

// AddFriend mocks base method.
func (m *MockUserUsecaseService) AddFriend(pctx context.Context, args user.CreateFriendReq) (userdb.Friend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFriend", pctx, args)
	ret0, _ := ret[0].(userdb.Friend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFriend indicates an expected call of AddFriend.
func (mr *MockUserUsecaseServiceMockRecorder) AddFriend(pctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFriend", reflect.TypeOf((*MockUserUsecaseService)(nil).AddFriend), pctx, args)
}

// DeleteUser mocks base method.
func (m *MockUserUsecaseService) DeleteUser(pctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", pctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserUsecaseServiceMockRecorder) DeleteUser(pctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserUsecaseService)(nil).DeleteUser), pctx, id)
}

// EditPhoneNumber mocks base method.
func (m *MockUserUsecaseService) EditPhoneNumber(pctx context.Context, args userdb.ChangePhoneNoParams) (userdb.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditPhoneNumber", pctx, args)
	ret0, _ := ret[0].(userdb.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditPhoneNumber indicates an expected call of EditPhoneNumber.
func (mr *MockUserUsecaseServiceMockRecorder) EditPhoneNumber(pctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditPhoneNumber", reflect.TypeOf((*MockUserUsecaseService)(nil).EditPhoneNumber), pctx, args)
}

// EditUsername mocks base method.
func (m *MockUserUsecaseService) EditUsername(pctx context.Context, args userdb.ChangeUsernameParams) (user.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditUsername", pctx, args)
	ret0, _ := ret[0].(user.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditUsername indicates an expected call of EditUsername.
func (mr *MockUserUsecaseServiceMockRecorder) EditUsername(pctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditUsername", reflect.TypeOf((*MockUserUsecaseService)(nil).EditUsername), pctx, args)
}

// FriendAccept mocks base method.
func (m *MockUserUsecaseService) FriendAccept(pctx context.Context, args user.EditFriendStatusAcceptedReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FriendAccept", pctx, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// FriendAccept indicates an expected call of FriendAccept.
func (mr *MockUserUsecaseServiceMockRecorder) FriendAccept(pctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FriendAccept", reflect.TypeOf((*MockUserUsecaseService)(nil).FriendAccept), pctx, args)
}

// FriendInfo mocks base method.
func (m *MockUserUsecaseService) FriendInfo(ctx context.Context, args userdb.GetFriendParams) ([]userdb.Friend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FriendInfo", ctx, args)
	ret0, _ := ret[0].([]userdb.Friend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FriendInfo indicates an expected call of FriendInfo.
func (mr *MockUserUsecaseServiceMockRecorder) FriendInfo(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FriendInfo", reflect.TypeOf((*MockUserUsecaseService)(nil).FriendInfo), ctx, args)
}

// FriendListById mocks base method.
func (m *MockUserUsecaseService) FriendListById(pctx context.Context, id int) ([]userdb.ListFriendsByUserIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FriendListById", pctx, id)
	ret0, _ := ret[0].([]userdb.ListFriendsByUserIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FriendListById indicates an expected call of FriendListById.
func (mr *MockUserUsecaseServiceMockRecorder) FriendListById(pctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FriendListById", reflect.TypeOf((*MockUserUsecaseService)(nil).FriendListById), pctx, id)
}

// FriendsCount mocks base method.
func (m *MockUserUsecaseService) FriendsCount(pctx context.Context, userId1 sql.NullInt32) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FriendsCount", pctx, userId1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FriendsCount indicates an expected call of FriendsCount.
func (mr *MockUserUsecaseServiceMockRecorder) FriendsCount(pctx, userId1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FriendsCount", reflect.TypeOf((*MockUserUsecaseService)(nil).FriendsCount), pctx, userId1)
}

// FriendsPendingList mocks base method.
func (m *MockUserUsecaseService) FriendsPendingList(pctx context.Context, userId2 sql.NullInt32) ([]userdb.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FriendsPendingList", pctx, userId2)
	ret0, _ := ret[0].([]userdb.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FriendsPendingList indicates an expected call of FriendsPendingList.
func (mr *MockUserUsecaseServiceMockRecorder) FriendsPendingList(pctx, userId2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FriendsPendingList", reflect.TypeOf((*MockUserUsecaseService)(nil).FriendsPendingList), pctx, userId2)
}

// FriendsRequestedList mocks base method.
func (m *MockUserUsecaseService) FriendsRequestedList(pctx context.Context, userId1 sql.NullInt32) ([]userdb.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FriendsRequestedList", pctx, userId1)
	ret0, _ := ret[0].([]userdb.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FriendsRequestedList indicates an expected call of FriendsRequestedList.
func (mr *MockUserUsecaseServiceMockRecorder) FriendsRequestedList(pctx, userId1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FriendsRequestedList", reflect.TypeOf((*MockUserUsecaseService)(nil).FriendsRequestedList), pctx, userId1)
}

// GetLatestId mocks base method.
func (m *MockUserUsecaseService) GetLatestId(pctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestId", pctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestId indicates an expected call of GetLatestId.
func (mr *MockUserUsecaseServiceMockRecorder) GetLatestId(pctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestId", reflect.TypeOf((*MockUserUsecaseService)(nil).GetLatestId), pctx)
}

// GetUserInfo mocks base method.
func (m *MockUserUsecaseService) GetUserInfo(pctx context.Context, id int) (userdb.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", pctx, id)
	ret0, _ := ret[0].(userdb.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockUserUsecaseServiceMockRecorder) GetUserInfo(pctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockUserUsecaseService)(nil).GetUserInfo), pctx, id)
}

// GetUserProfile mocks base method.
func (m *MockUserUsecaseService) GetUserProfile(pctx context.Context, id int) (user.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfile", pctx, id)
	ret0, _ := ret[0].(user.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfile indicates an expected call of GetUserProfile.
func (mr *MockUserUsecaseServiceMockRecorder) GetUserProfile(pctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfile", reflect.TypeOf((*MockUserUsecaseService)(nil).GetUserProfile), pctx, id)
}

// RegisterNewUser mocks base method.
func (m *MockUserUsecaseService) RegisterNewUser(pctx context.Context, payload *user.NewUserReq, photoUrl string) (userdb.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterNewUser", pctx, payload, photoUrl)
	ret0, _ := ret[0].(userdb.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterNewUser indicates an expected call of RegisterNewUser.
func (mr *MockUserUsecaseServiceMockRecorder) RegisterNewUser(pctx, payload, photoUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterNewUser", reflect.TypeOf((*MockUserUsecaseService)(nil).RegisterNewUser), pctx, payload, photoUrl)
}

// SaveToFirebaseStorage mocks base method.
func (m *MockUserUsecaseService) SaveToFirebaseStorage(pctx context.Context, bucketName, objectPath, filename string, file io.Reader) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveToFirebaseStorage", pctx, bucketName, objectPath, filename, file)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveToFirebaseStorage indicates an expected call of SaveToFirebaseStorage.
func (mr *MockUserUsecaseServiceMockRecorder) SaveToFirebaseStorage(pctx, bucketName, objectPath, filename, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveToFirebaseStorage", reflect.TypeOf((*MockUserUsecaseService)(nil).SaveToFirebaseStorage), pctx, bucketName, objectPath, filename, file)
}

// UserMockData mocks base method.
func (m *MockUserUsecaseService) UserMockData(ctx context.Context, count int16) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserMockData", ctx, count)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserMockData indicates an expected call of UserMockData.
func (mr *MockUserUsecaseServiceMockRecorder) UserMockData(ctx, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserMockData", reflect.TypeOf((*MockUserUsecaseService)(nil).UserMockData), ctx, count)
}