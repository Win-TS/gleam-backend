// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: group.sql

package groupdb

import (
	"context"
	"database/sql"
	"time"
)

const addGroupMember = `-- name: AddGroupMember :one
INSERT INTO group_members (group_id, member_id, role)
VALUES ($1, $2, $3)
RETURNING group_id, member_id, role, created_at
`

type AddGroupMemberParams struct {
	GroupID  int32  `json:"group_id"`
	MemberID int32  `json:"member_id"`
	Role     string `json:"role"`
}

func (q *Queries) AddGroupMember(ctx context.Context, arg AddGroupMemberParams) (GroupMember, error) {
	row := q.db.QueryRowContext(ctx, addGroupMember, arg.GroupID, arg.MemberID, arg.Role)
	var i GroupMember
	err := row.Scan(
		&i.GroupID,
		&i.MemberID,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const createGroup = `-- name: CreateGroup :one
INSERT INTO groups (
        group_name,
        group_creator_id,
        photo_url,
        frequency,
        tag_id
    )
VALUES ($1, $2, $3, $4, $5)
RETURNING group_id, group_name, group_creator_id, photo_url, tag_id, frequency, created_at
`

type CreateGroupParams struct {
	GroupName      string         `json:"group_name"`
	GroupCreatorID int32          `json:"group_creator_id"`
	PhotoUrl       sql.NullString `json:"photo_url"`
	Frequency      sql.NullInt32  `json:"frequency"`
	TagID          int32          `json:"tag_id"`
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (Group, error) {
	row := q.db.QueryRowContext(ctx, createGroup,
		arg.GroupName,
		arg.GroupCreatorID,
		arg.PhotoUrl,
		arg.Frequency,
		arg.TagID,
	)
	var i Group
	err := row.Scan(
		&i.GroupID,
		&i.GroupName,
		&i.GroupCreatorID,
		&i.PhotoUrl,
		&i.TagID,
		&i.Frequency,
		&i.CreatedAt,
	)
	return i, err
}

const createNewTag = `-- name: CreateNewTag :one
INSERT INTO tags (tag_name, icon_url)
VALUES ($1, $2)
RETURNING tag_id, tag_name, icon_url
`

type CreateNewTagParams struct {
	TagName string         `json:"tag_name"`
	IconUrl sql.NullString `json:"icon_url"`
}

func (q *Queries) CreateNewTag(ctx context.Context, arg CreateNewTagParams) (Tag, error) {
	row := q.db.QueryRowContext(ctx, createNewTag, arg.TagName, arg.IconUrl)
	var i Tag
	err := row.Scan(&i.TagID, &i.TagName, &i.IconUrl)
	return i, err
}

const deleteGroup = `-- name: DeleteGroup :exec
DELETE FROM groups
WHERE group_id = $1
`

func (q *Queries) DeleteGroup(ctx context.Context, groupID int32) error {
	_, err := q.db.ExecContext(ctx, deleteGroup, groupID)
	return err
}

const deleteMember = `-- name: DeleteMember :exec
DELETE FROM group_members
WHERE member_id = $1
    AND group_id = $2
`

type DeleteMemberParams struct {
	MemberID int32 `json:"member_id"`
	GroupID  int32 `json:"group_id"`
}

func (q *Queries) DeleteMember(ctx context.Context, arg DeleteMemberParams) error {
	_, err := q.db.ExecContext(ctx, deleteMember, arg.MemberID, arg.GroupID)
	return err
}

const editGroupName = `-- name: EditGroupName :exec
UPDATE groups
SET group_name = $2
WHERE group_id = $1
`

type EditGroupNameParams struct {
	GroupID   int32  `json:"group_id"`
	GroupName string `json:"group_name"`
}

func (q *Queries) EditGroupName(ctx context.Context, arg EditGroupNameParams) error {
	_, err := q.db.ExecContext(ctx, editGroupName, arg.GroupID, arg.GroupName)
	return err
}

const editGroupPhoto = `-- name: EditGroupPhoto :exec
UPDATE groups
SET photo_url = $2
WHERE group_id = $1
`

type EditGroupPhotoParams struct {
	GroupID  int32          `json:"group_id"`
	PhotoUrl sql.NullString `json:"photo_url"`
}

func (q *Queries) EditGroupPhoto(ctx context.Context, arg EditGroupPhotoParams) error {
	_, err := q.db.ExecContext(ctx, editGroupPhoto, arg.GroupID, arg.PhotoUrl)
	return err
}

const editMemberRole = `-- name: EditMemberRole :exec
UPDATE group_members
SET role = $3
WHERE group_id = $1
    AND member_id = $2
`

type EditMemberRoleParams struct {
	GroupID  int32  `json:"group_id"`
	MemberID int32  `json:"member_id"`
	Role     string `json:"role"`
}

func (q *Queries) EditMemberRole(ctx context.Context, arg EditMemberRoleParams) error {
	_, err := q.db.ExecContext(ctx, editMemberRole, arg.GroupID, arg.MemberID, arg.Role)
	return err
}

const getAvailableTags = `-- name: GetAvailableTags :many
SELECT tag_id, tag_name, icon_url
FROM tags
ORDER BY tag_id
`

func (q *Queries) GetAvailableTags(ctx context.Context) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, getAvailableTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tag{}
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.TagID, &i.TagName, &i.IconUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGroupByID = `-- name: GetGroupByID :one
SELECT groups.group_id,
    groups.group_name,
    groups.photo_url,
    groups.group_creator_id,
    groups.frequency,
    groups.created_at,
    tags.tag_name
FROM groups
    JOIN tags ON groups.tag_id = tags.tag_id
WHERE group_id = $1
`

type GetGroupByIDRow struct {
	GroupID        int32          `json:"group_id"`
	GroupName      string         `json:"group_name"`
	PhotoUrl       sql.NullString `json:"photo_url"`
	GroupCreatorID int32          `json:"group_creator_id"`
	Frequency      sql.NullInt32  `json:"frequency"`
	CreatedAt      time.Time      `json:"created_at"`
	TagName        string         `json:"tag_name"`
}

func (q *Queries) GetGroupByID(ctx context.Context, groupID int32) (GetGroupByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getGroupByID, groupID)
	var i GetGroupByIDRow
	err := row.Scan(
		&i.GroupID,
		&i.GroupName,
		&i.PhotoUrl,
		&i.GroupCreatorID,
		&i.Frequency,
		&i.CreatedAt,
		&i.TagName,
	)
	return i, err
}

const getGroupLatestId = `-- name: GetGroupLatestId :one
SELECT COALESCE(MAX(group_id), 0)::integer
FROM groups
`

func (q *Queries) GetGroupLatestId(ctx context.Context) (int32, error) {
	row := q.db.QueryRowContext(ctx, getGroupLatestId)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const getGroupsByTagID = `-- name: GetGroupsByTagID :many
SELECT group_id, group_name, group_creator_id, photo_url, tag_id, frequency, created_at
from groups
WHERE tag_id = $1
`

func (q *Queries) GetGroupsByTagID(ctx context.Context, tagID int32) ([]Group, error) {
	rows, err := q.db.QueryContext(ctx, getGroupsByTagID, tagID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Group{}
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.GroupID,
			&i.GroupName,
			&i.GroupCreatorID,
			&i.PhotoUrl,
			&i.TagID,
			&i.Frequency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMembersByGroupID = `-- name: GetMembersByGroupID :many
SELECT group_id, member_id, role, created_at
FROM group_members
WHERE group_id = $1
`

func (q *Queries) GetMembersByGroupID(ctx context.Context, groupID int32) ([]GroupMember, error) {
	rows, err := q.db.QueryContext(ctx, getMembersByGroupID, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GroupMember{}
	for rows.Next() {
		var i GroupMember
		if err := rows.Scan(
			&i.GroupID,
			&i.MemberID,
			&i.Role,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGroups = `-- name: ListGroups :many
SELECT group_id, group_name, group_creator_id, photo_url, tag_id, frequency, created_at
FROM groups
ORDER BY group_id
LIMIT $1 OFFSET $2
`

type ListGroupsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListGroups(ctx context.Context, arg ListGroupsParams) ([]Group, error) {
	rows, err := q.db.QueryContext(ctx, listGroups, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Group{}
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.GroupID,
			&i.GroupName,
			&i.GroupCreatorID,
			&i.PhotoUrl,
			&i.TagID,
			&i.Frequency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
