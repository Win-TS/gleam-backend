// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: streak.sql

package groupdb

import (
	"context"
	"database/sql"
	"time"
)

const createStreak = `-- name: CreateStreak :one
INSERT INTO streaks (
    streak_set_id
) VALUES (
    $1
) RETURNING streak_id, streak_set_id, max_streak_count, total_streak_count, weekly_streak_count, completed, recent_date_added, created_at
`

func (q *Queries) CreateStreak(ctx context.Context, streakSetID int32) (Streak, error) {
	row := q.db.QueryRowContext(ctx, createStreak, streakSetID)
	var i Streak
	err := row.Scan(
		&i.StreakID,
		&i.StreakSetID,
		&i.MaxStreakCount,
		&i.TotalStreakCount,
		&i.WeeklyStreakCount,
		&i.Completed,
		&i.RecentDateAdded,
		&i.CreatedAt,
	)
	return i, err
}

const createStreakSet = `-- name: CreateStreakSet :one
INSERT INTO streak_set (
    group_id,
    member_id,
    end_date
) VALUES (
    $1, $2, $3
) RETURNING streak_set_id, group_id, member_id, end_date, start_date
`

type CreateStreakSetParams struct {
	GroupID  int32     `json:"group_id"`
	MemberID int32     `json:"member_id"`
	EndDate  time.Time `json:"end_date"`
}

func (q *Queries) CreateStreakSet(ctx context.Context, arg CreateStreakSetParams) (StreakSet, error) {
	row := q.db.QueryRowContext(ctx, createStreakSet, arg.GroupID, arg.MemberID, arg.EndDate)
	var i StreakSet
	err := row.Scan(
		&i.StreakSetID,
		&i.GroupID,
		&i.MemberID,
		&i.EndDate,
		&i.StartDate,
	)
	return i, err
}

const deleteStreakSet = `-- name: DeleteStreakSet :exec
DELETE FROM streak_set WHERE group_id = $1 AND member_id = $2
`

type DeleteStreakSetParams struct {
	GroupID  int32 `json:"group_id"`
	MemberID int32 `json:"member_id"`
}

func (q *Queries) DeleteStreakSet(ctx context.Context, arg DeleteStreakSetParams) error {
	_, err := q.db.ExecContext(ctx, deleteStreakSet, arg.GroupID, arg.MemberID)
	return err
}

const editCompleteStatus = `-- name: EditCompleteStatus :exec


UPDATE streaks
SET completed = $3
WHERE streak_set_id IN (
    SELECT s.streak_set_id
    FROM streaks s
    JOIN streak_set ss ON s.streak_set_id = ss.streak_set_id
    WHERE ss.member_id = $1
    AND ss.group_id = $2
)
`

type EditCompleteStatusParams struct {
	MemberID  int32 `json:"member_id"`
	GroupID   int32 `json:"group_id"`
	Completed bool  `json:"completed"`
}

// -- name: ResetWeeklyStreak :exec
// UPDATE streaks
// SET weekly_streak_count = 0,
// completed = false
// WHERE streak_set_id IN (
//
//	SELECT s.streak_set_id
//	FROM streaks s
//	JOIN streak_set ss ON s.streak_set_id = ss.streak_set_id
//	WHERE ss.member_id = $1
//	AND ss.group_id = $2
//
// ) RETURNING *;
// -- name: ResetTotalStreak :exec
// UPDATE streaks
// SET total_streak_count = 0
// WHERE streak_set_id IN (
//
//	SELECT s.streak_set_id
//	FROM streaks s
//	JOIN streak_set ss ON s.streak_set_id = ss.streak_set_id
//	WHERE ss.member_id = $1
//	AND ss.group_id = $2
//
// ) RETURNING *;
func (q *Queries) EditCompleteStatus(ctx context.Context, arg EditCompleteStatusParams) error {
	_, err := q.db.ExecContext(ctx, editCompleteStatus, arg.MemberID, arg.GroupID, arg.Completed)
	return err
}

const editStreakSetEndDate = `-- name: EditStreakSetEndDate :exec
UPDATE streak_set
SET end_date = $3
WHERE group_id = $1 AND member_id = $2
RETURNING streak_set_id, group_id, member_id, end_date, start_date
`

type EditStreakSetEndDateParams struct {
	GroupID  int32     `json:"group_id"`
	MemberID int32     `json:"member_id"`
	EndDate  time.Time `json:"end_date"`
}

func (q *Queries) EditStreakSetEndDate(ctx context.Context, arg EditStreakSetEndDateParams) error {
	_, err := q.db.ExecContext(ctx, editStreakSetEndDate, arg.GroupID, arg.MemberID, arg.EndDate)
	return err
}

const getIncompletedStreakByUserID = `-- name: GetIncompletedStreakByUserID :many
SELECT s.streak_id, s.streak_set_id, s.max_streak_count, s.total_streak_count, s.weekly_streak_count, s.completed, s.recent_date_added, s.created_at, ss.group_id, ss.member_id, ss.end_date
FROM streaks s
JOIN streak_set ss ON s.streak_set_id = ss.streak_set_id
WHERE ss.member_id = $1
AND s.completed = false
`

type GetIncompletedStreakByUserIDRow struct {
	StreakID          int32        `json:"streak_id"`
	StreakSetID       int32        `json:"streak_set_id"`
	MaxStreakCount    int32        `json:"max_streak_count"`
	TotalStreakCount  int32        `json:"total_streak_count"`
	WeeklyStreakCount int32        `json:"weekly_streak_count"`
	Completed         bool         `json:"completed"`
	RecentDateAdded   sql.NullTime `json:"recent_date_added"`
	CreatedAt         time.Time    `json:"created_at"`
	GroupID           int32        `json:"group_id"`
	MemberID          int32        `json:"member_id"`
	EndDate           time.Time    `json:"end_date"`
}

func (q *Queries) GetIncompletedStreakByUserID(ctx context.Context, memberID int32) ([]GetIncompletedStreakByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getIncompletedStreakByUserID, memberID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetIncompletedStreakByUserIDRow{}
	for rows.Next() {
		var i GetIncompletedStreakByUserIDRow
		if err := rows.Scan(
			&i.StreakID,
			&i.StreakSetID,
			&i.MaxStreakCount,
			&i.TotalStreakCount,
			&i.WeeklyStreakCount,
			&i.Completed,
			&i.RecentDateAdded,
			&i.CreatedAt,
			&i.GroupID,
			&i.MemberID,
			&i.EndDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMaxStreakUser = `-- name: GetMaxStreakUser :one
SELECT max_streak_count
FROM streaks
WHERE max_streak_count = (
    SELECT MAX(max_streak_count)
    FROM streaks
    WHERE streak_set_id IN (
        SELECT s.streak_set_id
        FROM streaks s
        JOIN streak_set ss ON s.streak_set_id = ss.streak_set_id
        WHERE ss.member_id = $1
    )
)
`

func (q *Queries) GetMaxStreakUser(ctx context.Context, memberID int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, getMaxStreakUser, memberID)
	var max_streak_count int32
	err := row.Scan(&max_streak_count)
	return max_streak_count, err
}

const getStreakByMemberIDandGroupID = `-- name: GetStreakByMemberIDandGroupID :one
SELECT s.streak_id, s.streak_set_id, s.max_streak_count, s.total_streak_count, s.weekly_streak_count, s.completed, s.recent_date_added, s.created_at, ss.group_id, ss.member_id, ss.end_date
FROM streaks s
JOIN streak_set ss ON s.streak_set_id = ss.streak_set_id
WHERE ss.member_id = $1
AND ss.group_id = $2
`

type GetStreakByMemberIDandGroupIDParams struct {
	MemberID int32 `json:"member_id"`
	GroupID  int32 `json:"group_id"`
}

type GetStreakByMemberIDandGroupIDRow struct {
	StreakID          int32        `json:"streak_id"`
	StreakSetID       int32        `json:"streak_set_id"`
	MaxStreakCount    int32        `json:"max_streak_count"`
	TotalStreakCount  int32        `json:"total_streak_count"`
	WeeklyStreakCount int32        `json:"weekly_streak_count"`
	Completed         bool         `json:"completed"`
	RecentDateAdded   sql.NullTime `json:"recent_date_added"`
	CreatedAt         time.Time    `json:"created_at"`
	GroupID           int32        `json:"group_id"`
	MemberID          int32        `json:"member_id"`
	EndDate           time.Time    `json:"end_date"`
}

func (q *Queries) GetStreakByMemberIDandGroupID(ctx context.Context, arg GetStreakByMemberIDandGroupIDParams) (GetStreakByMemberIDandGroupIDRow, error) {
	row := q.db.QueryRowContext(ctx, getStreakByMemberIDandGroupID, arg.MemberID, arg.GroupID)
	var i GetStreakByMemberIDandGroupIDRow
	err := row.Scan(
		&i.StreakID,
		&i.StreakSetID,
		&i.MaxStreakCount,
		&i.TotalStreakCount,
		&i.WeeklyStreakCount,
		&i.Completed,
		&i.RecentDateAdded,
		&i.CreatedAt,
		&i.GroupID,
		&i.MemberID,
		&i.EndDate,
	)
	return i, err
}

const getStreakByMemberId = `-- name: GetStreakByMemberId :many
SELECT s.streak_id, s.streak_set_id, s.max_streak_count, s.total_streak_count, s.weekly_streak_count, s.completed, s.recent_date_added, s.created_at, ss.group_id, ss.member_id, ss.end_date
FROM streaks s 
JOIN streak_set ss ON s.streak_set_id = ss.streak_set_id
WHERE ss.member_id = $1
`

type GetStreakByMemberIdRow struct {
	StreakID          int32        `json:"streak_id"`
	StreakSetID       int32        `json:"streak_set_id"`
	MaxStreakCount    int32        `json:"max_streak_count"`
	TotalStreakCount  int32        `json:"total_streak_count"`
	WeeklyStreakCount int32        `json:"weekly_streak_count"`
	Completed         bool         `json:"completed"`
	RecentDateAdded   sql.NullTime `json:"recent_date_added"`
	CreatedAt         time.Time    `json:"created_at"`
	GroupID           int32        `json:"group_id"`
	MemberID          int32        `json:"member_id"`
	EndDate           time.Time    `json:"end_date"`
}

func (q *Queries) GetStreakByMemberId(ctx context.Context, memberID int32) ([]GetStreakByMemberIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getStreakByMemberId, memberID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetStreakByMemberIdRow{}
	for rows.Next() {
		var i GetStreakByMemberIdRow
		if err := rows.Scan(
			&i.StreakID,
			&i.StreakSetID,
			&i.MaxStreakCount,
			&i.TotalStreakCount,
			&i.WeeklyStreakCount,
			&i.Completed,
			&i.RecentDateAdded,
			&i.CreatedAt,
			&i.GroupID,
			&i.MemberID,
			&i.EndDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStreakByStreakSetId = `-- name: GetStreakByStreakSetId :one
SELECT streak_id, streak_set_id, max_streak_count, total_streak_count, weekly_streak_count, completed, recent_date_added, created_at FROM streaks
WHERE streak_set_id = $1
`

func (q *Queries) GetStreakByStreakSetId(ctx context.Context, streakSetID int32) (Streak, error) {
	row := q.db.QueryRowContext(ctx, getStreakByStreakSetId, streakSetID)
	var i Streak
	err := row.Scan(
		&i.StreakID,
		&i.StreakSetID,
		&i.MaxStreakCount,
		&i.TotalStreakCount,
		&i.WeeklyStreakCount,
		&i.Completed,
		&i.RecentDateAdded,
		&i.CreatedAt,
	)
	return i, err
}

const getStreakSetByEndDate = `-- name: GetStreakSetByEndDate :many
SELECT streak_set_id, group_id, member_id, end_date, start_date FROM streak_set
WHERE end_date = $1
`

func (q *Queries) GetStreakSetByEndDate(ctx context.Context, endDate time.Time) ([]StreakSet, error) {
	rows, err := q.db.QueryContext(ctx, getStreakSetByEndDate, endDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []StreakSet{}
	for rows.Next() {
		var i StreakSet
		if err := rows.Scan(
			&i.StreakSetID,
			&i.GroupID,
			&i.MemberID,
			&i.EndDate,
			&i.StartDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStreakSetByGroupId = `-- name: GetStreakSetByGroupId :many
SELECT streak_set_id, group_id, member_id, end_date, start_date FROM streak_set
WHERE group_id = $1
`

func (q *Queries) GetStreakSetByGroupId(ctx context.Context, groupID int32) ([]StreakSet, error) {
	rows, err := q.db.QueryContext(ctx, getStreakSetByGroupId, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []StreakSet{}
	for rows.Next() {
		var i StreakSet
		if err := rows.Scan(
			&i.StreakSetID,
			&i.GroupID,
			&i.MemberID,
			&i.EndDate,
			&i.StartDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStreakSetByGroupIdandUserId = `-- name: GetStreakSetByGroupIdandUserId :many
SELECT streak_set_id, group_id, member_id, end_date, start_date FROM streak_set
WHERE group_id = $1 AND member_id = $2
`

type GetStreakSetByGroupIdandUserIdParams struct {
	GroupID  int32 `json:"group_id"`
	MemberID int32 `json:"member_id"`
}

func (q *Queries) GetStreakSetByGroupIdandUserId(ctx context.Context, arg GetStreakSetByGroupIdandUserIdParams) ([]StreakSet, error) {
	rows, err := q.db.QueryContext(ctx, getStreakSetByGroupIdandUserId, arg.GroupID, arg.MemberID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []StreakSet{}
	for rows.Next() {
		var i StreakSet
		if err := rows.Scan(
			&i.StreakSetID,
			&i.GroupID,
			&i.MemberID,
			&i.EndDate,
			&i.StartDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStreakSetByStreakSetId = `-- name: GetStreakSetByStreakSetId :one
SELECT streak_set_id, group_id, member_id, end_date, start_date FROM streak_set
WHERE streak_set_id = $1
`

func (q *Queries) GetStreakSetByStreakSetId(ctx context.Context, streakSetID int32) (StreakSet, error) {
	row := q.db.QueryRowContext(ctx, getStreakSetByStreakSetId, streakSetID)
	var i StreakSet
	err := row.Scan(
		&i.StreakSetID,
		&i.GroupID,
		&i.MemberID,
		&i.EndDate,
		&i.StartDate,
	)
	return i, err
}

const increaseStreak = `-- name: IncreaseStreak :one
UPDATE streaks
SET total_streak_count = total_streak_count + 1, 
    weekly_streak_count = weekly_streak_count + 1,
    max_streak_count = max_streak_count +1,
    recent_date_added = CURRENT_TIMESTAMP
WHERE streak_set_id IN (
    SELECT s.streak_set_id
    FROM streaks s
    JOIN streak_set ss ON s.streak_set_id = ss.streak_set_id
    WHERE ss.member_id = $1
    AND ss.group_id = $2
) RETURNING streak_id, streak_set_id, max_streak_count, total_streak_count, weekly_streak_count, completed, recent_date_added, created_at
`

type IncreaseStreakParams struct {
	MemberID int32 `json:"member_id"`
	GroupID  int32 `json:"group_id"`
}

func (q *Queries) IncreaseStreak(ctx context.Context, arg IncreaseStreakParams) (Streak, error) {
	row := q.db.QueryRowContext(ctx, increaseStreak, arg.MemberID, arg.GroupID)
	var i Streak
	err := row.Scan(
		&i.StreakID,
		&i.StreakSetID,
		&i.MaxStreakCount,
		&i.TotalStreakCount,
		&i.WeeklyStreakCount,
		&i.Completed,
		&i.RecentDateAdded,
		&i.CreatedAt,
	)
	return i, err
}

const resetStreak = `-- name: ResetStreak :exec
UPDATE streaks
SET total_streak_count = 0, 
    weekly_streak_count = 0,
    completed = false
WHERE streak_set_id IN (
    SELECT s.streak_set_id
    FROM streaks s
    JOIN streak_set ss ON s.streak_set_id = ss.streak_set_id
    WHERE ss.member_id = $1
    AND ss.group_id = $2
) RETURNING streak_id, streak_set_id, max_streak_count, total_streak_count, weekly_streak_count, completed, recent_date_added, created_at
`

type ResetStreakParams struct {
	MemberID int32 `json:"member_id"`
	GroupID  int32 `json:"group_id"`
}

func (q *Queries) ResetStreak(ctx context.Context, arg ResetStreakParams) error {
	_, err := q.db.ExecContext(ctx, resetStreak, arg.MemberID, arg.GroupID)
	return err
}

const resetTotalStreak = `-- name: ResetTotalStreak :exec
UPDATE streaks
SET total_streak_count = 0,
    weekly_streak_count = 0
WHERE streak_set_id IN (
    SELECT s.streak_set_id
    FROM streaks s
    JOIN streak_set ss ON s.streak_set_id = ss.streak_set_id
    WHERE s.completed = false 
    AND ss.end_date::date = CURRENT_DATE
)
`

func (q *Queries) ResetTotalStreak(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetTotalStreak)
	return err
}

const resetWeeklyStreak = `-- name: ResetWeeklyStreak :exec
UPDATE streaks
SET weekly_streak_count = 0,
completed = false
WHERE streak_set_id IN (
    SELECT s.streak_set_id
    FROM streaks s
    JOIN streak_set ss ON s.streak_set_id = ss.streak_set_id
    WHERE s.completed = true
    AND ss.end_date::date = CURRENT_DATE
) RETURNING streak_id, streak_set_id, max_streak_count, total_streak_count, weekly_streak_count, completed, recent_date_added, created_at
`

func (q *Queries) ResetWeeklyStreak(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetWeeklyStreak)
	return err
}
