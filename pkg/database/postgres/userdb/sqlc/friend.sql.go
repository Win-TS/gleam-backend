// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: friend.sql

package userdb

import (
	"context"
	"database/sql"
)

const createFriend = `-- name: CreateFriend :one
INSERT INTO friends (
  user_id1,
  user_id2
) VALUES (
  $1, $2
) RETURNING id, user_id1, user_id2, status, created_at
`

type CreateFriendParams struct {
	UserId1 sql.NullInt32 `json:"user_id1"`
	UserId2 sql.NullInt32 `json:"user_id2"`
}

func (q *Queries) CreateFriend(ctx context.Context, arg CreateFriendParams) (Friend, error) {
	row := q.db.QueryRowContext(ctx, createFriend, arg.UserId1, arg.UserId2)
	var i Friend
	err := row.Scan(
		&i.ID,
		&i.UserId1,
		&i.UserId2,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getFriend = `-- name: GetFriend :one
SELECT id, user_id1, user_id2, status, created_at FROM friends
WHERE user_id1 = $1 AND user_id2= $2
LIMIT 1
`

type GetFriendParams struct {
	UserId1 sql.NullInt32 `json:"user_id1"`
	UserId2 sql.NullInt32 `json:"user_id2"`
}

func (q *Queries) GetFriend(ctx context.Context, arg GetFriendParams) (Friend, error) {
	row := q.db.QueryRowContext(ctx, getFriend, arg.UserId1, arg.UserId2)
	var i Friend
	err := row.Scan(
		&i.ID,
		&i.UserId1,
		&i.UserId2,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getFriendForUpdate = `-- name: GetFriendForUpdate :one
SELECT id, user_id1, user_id2, status, created_at FROM friends
WHERE user_id1 = $1 AND user_id2 = $2 LIMIT 1 
FOR NO KEY UPDATE
`

type GetFriendForUpdateParams struct {
	UserId1 sql.NullInt32 `json:"user_id1"`
	UserId2 sql.NullInt32 `json:"user_id2"`
}

func (q *Queries) GetFriendForUpdate(ctx context.Context, arg GetFriendForUpdateParams) (Friend, error) {
	row := q.db.QueryRowContext(ctx, getFriendForUpdate, arg.UserId1, arg.UserId2)
	var i Friend
	err := row.Scan(
		&i.ID,
		&i.UserId1,
		&i.UserId2,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listFriendsByUserId = `-- name: ListFriendsByUserId :many
SELECT id, user_id1, user_id2, status, created_at FROM friends
WHERE user_id1 = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListFriendsByUserIdParams struct {
	UserId1 sql.NullInt32 `json:"user_id1"`
	Limit   int32         `json:"limit"`
	Offset  int32         `json:"offset"`
}

func (q *Queries) ListFriendsByUserId(ctx context.Context, arg ListFriendsByUserIdParams) ([]Friend, error) {
	rows, err := q.db.QueryContext(ctx, listFriendsByUserId, arg.UserId1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Friend{}
	for rows.Next() {
		var i Friend
		if err := rows.Scan(
			&i.ID,
			&i.UserId1,
			&i.UserId2,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
