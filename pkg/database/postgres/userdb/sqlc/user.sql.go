// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package userdb

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
)

const changePhoneNo = `-- name: ChangePhoneNo :exec
UPDATE users SET phone_no = $2
WHERE id = $1
`

type ChangePhoneNoParams struct {
	ID      int32  `json:"id"`
	PhoneNo string `json:"phone_no"`
}

func (q *Queries) ChangePhoneNo(ctx context.Context, arg ChangePhoneNoParams) error {
	_, err := q.db.ExecContext(ctx, changePhoneNo, arg.ID, arg.PhoneNo)
	return err
}

const changeUsername = `-- name: ChangeUsername :exec
UPDATE users SET username = $2
WHERE id = $1
`

type ChangeUsernameParams struct {
	ID       int32  `json:"id"`
	Username string `json:"username"`
}

func (q *Queries) ChangeUsername(ctx context.Context, arg ChangeUsernameParams) error {
	_, err := q.db.ExecContext(ctx, changeUsername, arg.ID, arg.Username)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username,
    firstname,
    lastname,
    phone_no,
    email,
    nationality,
    birthday,
    gender,
    photourl
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, username, email, firstname, lastname, phone_no, private_account, nationality, birthday, gender, photourl, created_at
`

type CreateUserParams struct {
	Username    string         `json:"username"`
	Firstname   string         `json:"firstname"`
	Lastname    string         `json:"lastname"`
	PhoneNo     string         `json:"phone_no"`
	Email       string         `json:"email"`
	Nationality string         `json:"nationality"`
	Birthday    time.Time      `json:"birthday"`
	Gender      string         `json:"gender"`
	Photourl    sql.NullString `json:"photourl"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Firstname,
		arg.Lastname,
		arg.PhoneNo,
		arg.Email,
		arg.Nationality,
		arg.Birthday,
		arg.Gender,
		arg.Photourl,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Firstname,
		&i.Lastname,
		&i.PhoneNo,
		&i.PrivateAccount,
		&i.Nationality,
		&i.Birthday,
		&i.Gender,
		&i.Photourl,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const editBothNames = `-- name: EditBothNames :exec
UPDATE users
SET
    firstname = $2,
    lastname = $3
WHERE
    id = $1
`

type EditBothNamesParams struct {
	ID        int32  `json:"id"`
	Firstname string `json:"firstname"`
	Lastname  string `json:"lastname"`
}

func (q *Queries) EditBothNames(ctx context.Context, arg EditBothNamesParams) error {
	_, err := q.db.ExecContext(ctx, editBothNames, arg.ID, arg.Firstname, arg.Lastname)
	return err
}

const editFirstNameOnly = `-- name: EditFirstNameOnly :exec
UPDATE users
SET
    firstname = $2
WHERE
    id = $1
`

type EditFirstNameOnlyParams struct {
	ID        int32  `json:"id"`
	Firstname string `json:"firstname"`
}

func (q *Queries) EditFirstNameOnly(ctx context.Context, arg EditFirstNameOnlyParams) error {
	_, err := q.db.ExecContext(ctx, editFirstNameOnly, arg.ID, arg.Firstname)
	return err
}

const editLastNameOnly = `-- name: EditLastNameOnly :exec
UPDATE users
SET
    lastname = $2
WHERE
    id = $1
`

type EditLastNameOnlyParams struct {
	ID       int32  `json:"id"`
	Lastname string `json:"lastname"`
}

func (q *Queries) EditLastNameOnly(ctx context.Context, arg EditLastNameOnlyParams) error {
	_, err := q.db.ExecContext(ctx, editLastNameOnly, arg.ID, arg.Lastname)
	return err
}

const editUserProfilePicture = `-- name: EditUserProfilePicture :exec
UPDATE users
SET
    photourl = $2
WHERE
    id = $1
`

type EditUserProfilePictureParams struct {
	ID       int32          `json:"id"`
	Photourl sql.NullString `json:"photourl"`
}

func (q *Queries) EditUserProfilePicture(ctx context.Context, arg EditUserProfilePictureParams) error {
	_, err := q.db.ExecContext(ctx, editUserProfilePicture, arg.ID, arg.Photourl)
	return err
}

const getBatchUserProfiles = `-- name: GetBatchUserProfiles :many
SELECT id, username, email, firstname, lastname, photourl FROM users
WHERE id = ANY($1::int[])
`

type GetBatchUserProfilesRow struct {
	ID        int32          `json:"id"`
	Username  string         `json:"username"`
	Email     string         `json:"email"`
	Firstname string         `json:"firstname"`
	Lastname  string         `json:"lastname"`
	Photourl  sql.NullString `json:"photourl"`
}

func (q *Queries) GetBatchUserProfiles(ctx context.Context, dollar_1 []int32) ([]GetBatchUserProfilesRow, error) {
	rows, err := q.db.QueryContext(ctx, getBatchUserProfiles, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetBatchUserProfilesRow{}
	for rows.Next() {
		var i GetBatchUserProfilesRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Firstname,
			&i.Lastname,
			&i.Photourl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestId = `-- name: GetLatestId :one
SELECT COALESCE(MAX(id), 0)::integer FROM users
`

func (q *Queries) GetLatestId(ctx context.Context) (int32, error) {
	row := q.db.QueryRowContext(ctx, getLatestId)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, email, firstname, lastname, phone_no, private_account, nationality, birthday, gender, photourl, created_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Firstname,
		&i.Lastname,
		&i.PhoneNo,
		&i.PrivateAccount,
		&i.Nationality,
		&i.Birthday,
		&i.Gender,
		&i.Photourl,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, firstname, lastname, phone_no, private_account, nationality, birthday, gender, photourl, created_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Firstname,
		&i.Lastname,
		&i.PhoneNo,
		&i.PrivateAccount,
		&i.Nationality,
		&i.Birthday,
		&i.Gender,
		&i.Photourl,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, firstname, lastname, phone_no, private_account, nationality, birthday, gender, photourl, created_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Firstname,
		&i.Lastname,
		&i.PhoneNo,
		&i.PrivateAccount,
		&i.Nationality,
		&i.Birthday,
		&i.Gender,
		&i.Photourl,
		&i.CreatedAt,
	)
	return i, err
}

const getUserForUpdate = `-- name: GetUserForUpdate :one
SELECT id, username, email, firstname, lastname, phone_no, private_account, nationality, birthday, gender, photourl, created_at FROM users
WHERE id = $1 LIMIT 1 
FOR NO KEY UPDATE
`

func (q *Queries) GetUserForUpdate(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserForUpdate, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Firstname,
		&i.Lastname,
		&i.PhoneNo,
		&i.PrivateAccount,
		&i.Nationality,
		&i.Birthday,
		&i.Gender,
		&i.Photourl,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, email, firstname, lastname, phone_no, private_account, nationality, birthday, gender, photourl, created_at FROM users
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Firstname,
			&i.Lastname,
			&i.PhoneNo,
			&i.PrivateAccount,
			&i.Nationality,
			&i.Birthday,
			&i.Gender,
			&i.Photourl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchUsersByUsername = `-- name: SearchUsersByUsername :many
SELECT id, username, email, firstname, lastname, photourl
FROM users
WHERE username ILIKE '%' || $1 || '%'
`

type SearchUsersByUsernameRow struct {
	ID        int32          `json:"id"`
	Username  string         `json:"username"`
	Email     string         `json:"email"`
	Firstname string         `json:"firstname"`
	Lastname  string         `json:"lastname"`
	Photourl  sql.NullString `json:"photourl"`
}

func (q *Queries) SearchUsersByUsername(ctx context.Context, dollar_1 sql.NullString) ([]SearchUsersByUsernameRow, error) {
	rows, err := q.db.QueryContext(ctx, searchUsersByUsername, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SearchUsersByUsernameRow{}
	for rows.Next() {
		var i SearchUsersByUsernameRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Firstname,
			&i.Lastname,
			&i.Photourl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProfile = `-- name: UpdateProfile :exec
UPDATE users SET username = $2 AND photourl = $3
WHERE id = $1
`

type UpdateProfileParams struct {
	ID       int32          `json:"id"`
	Username string         `json:"username"`
	Photourl sql.NullString `json:"photourl"`
}

func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) error {
	_, err := q.db.ExecContext(ctx, updateProfile, arg.ID, arg.Username, arg.Photourl)
	return err
}
